[project]
name = "openmm-onnx"
description = "ONNX OpenMM plugin"
authors = [{ name = "Peter Eastman", email = "peastman@stanford.edu" }]
readme = "README.md"
license = "PSF-2.0"
requires-python = ">=3.8"
dynamic = ["version", "dependencies"]
classifiers = ["Programming Language :: Python :: 3"]

[project.urls]
"Homepage" = "https://openmm.org"
"Bug Tracker" = "https://github.com/openmm/openmm/issues"
"Download URL" = "https://openmm.org"

[tool.setuptools.packages.find]
include = ["openmmonnx*", "openmm*"]

# [tool.setuptools.exclude-package-data]
# "*" = ["*.c", "*.cpp", "*.h", "*.cuh", "*.cu", ".gitignore"]

[tool.pytest.ini_options]
python_files = "*.py"
python_classes = "Test"
python_functions = "test*"

[build-system]
requires = ["setuptools>=78", "setuptools-scm>=8", "numpy", "cython"]
build-backend = "setuptools.build_meta"


[tool.cibuildwheel]
skip = [
  "cp38-*",
  "pp*",
  "*win32",
  "*armv7l",
  "*_i686",
  "*_ppc64le",
  "*_s390x",
  "*_universal2",
  "*-musllinux_*",
]
test-requires = ["pytest"]
test-command = "pytest {project}/python/tests"
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"
environment-pass = ["ACCELERATOR"]
container-engine = "docker; create_args: --gpus all"

[tool.cibuildwheel.windows]
before-all = "bash {project}/python/cibuildwheel_support/before_all_windows.sh"
test-command = "pytest {project}\\python\\tests"

[tool.cibuildwheel.linux]
before-all = "bash {project}/python/cibuildwheel_support/before_all_linux.sh"
repair-wheel-command = [
  "auditwheel repair --exclude libcudart.so.* --exclude libOpenMMONNX.so --exclude libc10.so --exclude libc10_cuda.so --exclude libtorch.so --exclude libtorch_cuda.so --exclude libtorch_cpu.so --exclude libtorch_python.so --exclude libOpenMM.so --exclude libOpenMMCUDA.so --exclude libOpenMMHIP.so --exclude libOpenMMOpenCL.so --exclude libOpenMMDrude.so --exclude libOpenMMAmoeba.so --exclude libOpenMMRPMD.so --exclude libOpenCL.so.1 --exclude libcuda.so.1 --exclude libcufft.so.11 --exclude libcufft.so.10 --exclude libnvrtc.so.11.2 --exclude libnvrtc.so.12 --exclude libhiprtc.so.6 --exclude libamdhip64.so.6 -w {dest_dir} {wheel}",
]

[tool.cibuildwheel.macos]
before-all = "bash {project}/python/cibuildwheel_support/before_all_osx.sh"
before-build = "bash {project}/python/cibuildwheel_support/before_build_osx.sh"
repair-wheel-command = [
  "delocate-wheel --ignore-missing-dependencies --require-archs {delocate_archs} -w {dest_dir} -v {wheel}",
]
